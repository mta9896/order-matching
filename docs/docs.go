// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orderbook": {
            "get": {
                "description": "Returns a list of buy and sell orders with their price and liquidity.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order book",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of orders to retrieve (default is 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved order book",
                        "schema": {
                            "$ref": "#/definitions/handlers.OrderBookResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Returns a paginated list of all orders placed in the order book.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get list of orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default is 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of orders per page (default is 10)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of orders",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Places a buy or sell order in the order book and returns matched orders if available.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully placed",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    },
                    "409": {
                        "description": "Duplicate order detected",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    },
                    "422": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.OrderBookResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OrderBookEntry"
                    }
                }
            }
        },
        "handlers.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Order"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "required": [
                "action",
                "amount",
                "price",
                "uuid"
            ],
            "properties": {
                "action": {
                    "enum": [
                        "BUY",
                        "SELL"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OrderType"
                        }
                    ]
                },
                "amount": {
                    "type": "number"
                },
                "price": {
                    "type": "number"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.OrderBookEntry": {
            "type": "object",
            "properties": {
                "liquidity": {
                    "type": "number"
                },
                "price": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/models.OrderType"
                }
            }
        },
        "models.OrderType": {
            "type": "string",
            "enum": [
                "BUY",
                "SELL"
            ],
            "x-enum-varnames": [
                "Buy",
                "Sell"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Order Matching API",
	Description:      "This is an API for an order matching system.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
